----------   Introduction   ----------


You can find the template for the project here:

https://github.com/Ian-Moffett/UEFIOSDevTemplate


You will need to install qemu which is a 
virtual machine program to run your OS.

If you ever need help just put an issue on
the github for the book.


----------   Hello, World!   ----------


OSDEV: welcome to your new journey!

You will need to edit gnu-efi/bootloader/main.c

First include efi.h
and also include efilib.h and stdint.h

You will need to create an entry point called efi_main
which will return EFI_STATUS.

This function takes 2 parameters: 

- EFI_HANDLE imageHandle
- EFI_SYSTEM_TABLE* systemTable


Inside the main function you should
initalize the library by calling 
InitalizeLib and passing imageHandle and systemTable.


Use the Print function like so:
Print(L"Any text here\n");
    

And return EFI_SUCESS.

L means long char*.

Now go back to the original folder you were in before and type:
make

Now, type make nfs,
press enter.

Congrats! You have done your first Hello World in your OS!


----------  Loading your first kernel.   ----------


It is time for you to make a kernel!
You will need to load the elf program header
of your compiled kernel into memory
and then jump to it.

How do we do that?
Well first we must load it into memory lol.

You will want to create a function that can load a file.
The function will return EFI_FILE* and it will take

- EFI_FILE* directory
- CHAR16* path
- EFI_HANDLE imageHandle
- EFI_SYSTEM_TABLE* sysTable

Now you want to prepare a variable with type:
EFI_FILE* called fileres.

That will contain the loaded file when we 
finished loading it.

You also want to prepare a variable with type
EFI_LOADED_IMAGE_PROTOCOL* 
which will hold our loaded image.


"But what is a protocol?"

I am glad you asked! 
A protocol serves to enable communication
between separately built modules like drivers.

You will need to get the filesystem that 
the computer booting from.

Use:
sysTable->BootServices->HandleProtocol()
and pass these three things in order:

- imageHandle
- &gEfiLoadedImageProtocolGuid
- (void**)&loadedImage.

Now create a variable of type:

EFI_SIMPLE_FILE_SYSTEM_PROTOCOL*
called filesystem.

Now you need to get the filesystem protocol by calling
sysTable->BootServices->HandleProtocol()
and passing the following in order:

- loadedImage->DeviceHandle
- &gEfiSimpleFileSystemProtocolGuid
- (void**)&filesystem

Now you want to check if the directory is NULL
meaning the person who is calling loadFile is 
requesting the root directory.

If it is then set directory to root by calling
filesystem->OpenVolume(filesystem, &directory)

Don't worry if it is getting too complicated,
I'll explain other functions better.

Now you need to get the status by storing the result
of directory->Open(directory, &fileres, path, EFI_FILE_MODE_READ,
    EFI_FILE_READ_ONLY);

inside a variable of type EFI_STATUS

check if status doesn't equal EFI_SUCESS.
If it doesn't then return NULL.

Now return fileres.


Now in our main function we need to check if the result of loadFile 
(the function we created earlier does not return NULL.

Create a variable of type EFI_FILE* (I will refer to this variable as kernel).
which will be set to loadFile(NULL, L"kernel.elf", imageHandle, sysTable).

If it doens't return NULL then we can continue.

Now we need to get some information about the kernel ELF
by loading it's ELF header.

You will need to include elf.h

Now define a variable of type Elf64_Ehdr
which will be our headers.

Define these variables of these types.

- UINTN (this will the size of the file info)[fileInfoSize]
- EFI_FILE_INFO* (this will be the file info)[fileInfo].

If you wanna know what those square brackets are next to 
the descriptions of the types I wrote, that's just what
I will be refering the variables as.



Now to get the information.


Call kernel->GetInfo() to get fileinfo size.

and pass the following:

- kernel 
- &gEfiFileInfoGuid
- &fileinfoSize
- NULL

Now, we are going to have to allocate some memory for 
the file info.

You can do that by using:

sysTable->BootServices->AllocatePool()

and passing the following:

- EfiLoaderData (don't worry about this).
- fileInfoSize
- (void**)&fileInfo

Now get the size with sizeof(header) and store it in
a varible of type UINTN  [size].

Now read the file info into header with

kernel->Read(kernel, &size, &header).


You will need to paste this helper function somewhere above this function.


int memcmp(const void* aptr, const void* bptr, size_t n) {
	const unsigned char* a = aptr, *b = bptr;
	for (size_t i = 0; i < n; i++) {
		if (a[i] < b[i]) return -1;
		else if (a[i] > b[i]) return 1;
	}
	return 0;
}

Now we will need to verify the ELF header by doing.

if (memcmp(&header.e_ident[EI_MAG0], ELFMAG, SELFMAG) != 0 ||
    header.e_ident[EI_CLASS] != ELFCLASS64 || 
    header.e_type != ET_EXEC || 
    header.e_machine != EM_X86_64 || header.e_version != EV_CURRENT) {

    Print(L"Kernel ELF bad.\n");
} else {
    // Continue from here.
}


Now we need to load the program header.

Create a variable of type Elf64_Phdr* 
which will be our program headers.

Now do 

kernel->SetPosition(kernel, header.e_phoff);

which will set the offset that it will load at in the array of bytes for the next
time we call Read()

Now create a variable of type UINTN which will be 
called progheadersize which will be equal to 
header.phnum * header.e_phentsize.

We need to allocate some memory for the program headers.

Do that by using 

sysTable->BootServices->AllocatePool(EfiLoaderData, progheadersize, (void**)&programheaders)

Now we will read it info memory.

kernel->Read(kernel, &size, programheaders);

Now do this:

for (Elf64_Phdr* phdr = phdrs; (char*)phdr < (char*)phdrs + header.e_phnum * header.e_phentsize; phdr = (Elf64_Phdr*)((char*)phdr + header.e_phentsize)) {
    // Continue in here.
}


Now use a switch statement to check
phdr->p_type

if it is PT_LOAD
then create a scope with '{}'

and create a variable called pages which will be type int and
equal to (phdr->p_memsz + 0x1000 - 1) / 0x1000.
And another one with type Elf64_Addr called segment which
is assigned to phdr->p_paddr.

Now call:

sysTable->BootServices->AllocatePages(AllocateAddress, EfiLoaderData, pages, &segment).

And do:

kernel->SetPosition(kernel, phdr->p_offset);
UINTN size = phdr->p_filesz;
kernel->Read(kernel, &size, (void*)segment);
break;


Now outside of the loop create a function pointer like so:


void(*kernel_entry)() = ((__attribute__((sysv_abi))void(*)())header.e_entry);

And you can call it like so:

kernel_entry();


----------  GOP   ----------

Want to write pixels to the screen?
That's where graphics output protocol or GOP comes in.

Let's get started.

Create a function that returns framebuffer_t* called initGOP()

It will take one parameter:

EFI_SYSTEM_TABLE* sysTable.

framebuffer_t will be defined later.

We will need to get the GOP protocol GUID.

Create a variable called gopGuid with type EFI_GUID and is set
to EFI_GRAPHICS_OUTPUT_PROTOCOL_GUID.
Next, create a variable of type EFI_GRAPHICS_OUTPUT_PROTOCOL* called gop.
Now create a variable of type EFI_STATUS called status
and set it equal to uefi_call_wrapper(BS->LocateProtocol, 3, &gopGuid, NULL, (void**)&gop).
uefi_call_wrapper() is just a little helper function to make calling
certain UEFI functions easier.

do:

if (EFI_ERROR(status)) {
    return NULL;
}

Now just create a struct called framebuffer which will
look like this

typedef struct {
    void* baseAddr;
    size_t bufferSize;
    unsigned int width;
    unsigned int height;
    unsigned int ppsl;      // Pixels per scanline (don't worry about this).
} framebuffer_t;


Now inside your function that prepares GOP create a pointer instance
of the framebuffer_t struct. 

Do this:

sysTable->BootServices->AllocatePool(EfiLoaderData, sizeof(framebuffer_t), (void**)&<framebuffer instance name>);


Set it's baseAddr equal to (void*)gop->Mode->FrameBufferBase.
Set it's bufferSize equal to gop->Mode->FrameBufferSize.
Set it's width equal to gop->Mode->Info->HorizontalResolution.
Set it's height equal to gop->Mode->Info->VerticalResolution.
Set it's ppsl equal to gop->Mode->Info->PixelsPerScanLine.


Now return the framebuffer.


In efi_main create a frame_buffer_t* newBuffer = initalizeGOP(sysTable);


Now you want to return to the normal directory do the following commands:

mkdir kernel/drivers kernel/drivers/impl

Now you want to edit kernel/drivers/FrameBuffer.h


And you want to paste that framebuffer_t struct that you had in the bootloader.

Now include FrameBuffer.h in kernel/src/kernel.c

And make sure _start takes a pointer to framebuffer_t*.


Now in the bootloader change the function pointer from this:

void(*kernel_entry)() = ((__attribute__((sysv_abi))void(*)())kernelHeader.e_entry);

To this:

void(*kernel_entry)(framebuffer_t*) = ((__attribute__((sysv_abi))void(*)(framebuffer_t*))kernelHeader.e_entry);


Now you will need to decode a font file.

Do this:

#define PSF1_MAGIC0 0x00000036
#define PSF1_MAGIC1 0x00000004


typedef struct {
    unsigned char magic[2];
    unsigned char mode;
    unsigned char chsize;
} psf1_header_t;


typedef struct { 
    psf1_header_t* header;
    void* glyphBuffer;
} psf1_font_t;


Now we need to create a function that loads the font.

The function goes like this:

psf1_font_t* load_psf1_font(EFI_FILE* dir, CHAR16* path, EFI_HANDLE imageHandle, EFI_SYSTEM_TABLE* systable) {
    EFI_FILE* font = loadFile(dir, path, imageHandle, systable);

    if (!(font)) {
        return NULL;    // File does not exist.
    }

    psf1_header_t* fontHeader;
    systable->BootServices->AllocatePool(EfiLoaderData, sizeof(psf1_header_t), (void**)&fontHeader);   // Allocate memory for header.
    UINTN size = sizeof(psf1_header_t);
    font->Read(font, &size, fontHeader);

    if (!(fontHeader->magic[0] & PSF1_MAGIC0) || !(fontHeader->magic[1] & PSF1_MAGIC1)) {
        return NULL;   // Format bad.
    }

    UINTN glyphBuffersize = fontHeader->chsize * 256;

    if (fontHeader->mode == 1) {
        glyphBuffersize = fontHeader->chsize * 512;
    }

    void* glyphBuffer;
    font->SetPosition(font, sizeof(psf1_header_t));
    systable->BootServices->AllocatePool(EfiLoaderData, glyphBuffersize, (void**)&glyphBuffer);
    font->Read(font, &glyphBuffersize, glyphBuffer);

    psf1_font_t* fontRes;
    systable->BootServices->AllocatePool(EfiLoaderData, sizeof(psf1_font_t), (void**)&fontRes);

    fontRes->header = fontHeader;
    fontRes->glyphBuffer = glyphBuffer;
    return fontRes;
}


Now in our main create a psf1_font_t* newfont which is equal
to loadFont(NULL, L"zap-light16.psf", imageHandle, sysTable);

Now, check if newfont is NULL (if you made it return NULL when not found) 
if it is then the font
is not found.


Now what you wanna do is make both the function poiunter and the kernel entry function
take a psf1_font_t* argument as the font.

Of course you ware going to have to copy the font stuff over 
to the LFB driver in the kernel.


Now you can write a putstring function with
the helper putchar function.




----------  EFI Memory Map  ----------


We can use the EFI memory map to find out
what memory segments our kernel can use.

We need the EFI memory map first.

Go to gnu-efi/bootloader/main.c
and edit it.


In efi_main create a variable 
of type EFI_MEMORY_DESCRIPTOR*
and is assigned to NULL which will be our map.

And three with UINTN which will be our
mapSize mapKey and descriptorSize.

Also create a variable of type UINT32 called
descriptorVersion (don't worry about this).

EFI_MEMORY_DESCRIPTOR descriptor is just points to a 
struct that gives information like
the number of pages of the memory segment,
the physical address of the section and type.


mapSize is just the size of the map.
descriptor size is size of each descriptor
entry.

And map key is something we don't need to
worry about.

Do:

sysTable->BootServices->GetMemoryMap(&mapSize, map, &mapKey, &descriptorSize, &descriptorVersion);   // Gets size.
sysTable->BootServices->AllocatePool(EfiLoaderData, mapSize, (void**)&map);    // Allocates memory for map.
sysTable->BootServices->GetMemoryMap(&mapSize, map, &mapKey, &descriptorSize, &descriptorVersion);          // Reads map into memory.


Also create a memory_info_t struct that will hold
- EFI_MEMORY_DESCRIPTOR* map;
- UINTN mapSize
- UINTN mapDescriptorSize.


Now do:

memory_info_t mem_info = {
    .map = map,
    .mapSize = mapSize,
    .mapDescriptorSize = descriptorSize
};

And make sure both the function pointer and 
kernel_start take a mem_info struct as an
argument.

Also make sure bootservices is no longer active
so watchdog doesn't think it has crashed
and reboot the system by doing:

sysTable->BootServices->ExitBootServices(imageHandle, mapKey);

Do:

mkdir kernel/src/drivers/memory/ kernel/src/drivers/memory/impl

Create a file inside kernel/src/drivers/memory

called memoryInfo.h

Paste the memory_info struct you made
in the bootloader and also do:

extern const char* const memseg[];

That will be defined in memoryInfo.c

You will need to make a struct called
memdesc_t.

The following will be declared in the struct:

- uint32_t type
- void* physAddr
- void* virtAddr
- uint64_t numPages
- uint64_t attr

You will also need to include stdint.h

Make sure after you paste the memory_info_t 
struct to replace EFI_MEMORY_DESCRIPTOR in 
the struct to memdesc_t.

Also, replace UINTN to uint64_t.

Now, make a const char* array in memoryInfo.c 
that holds the following:

"EfiReservedMemoryType",
"EfiLoaderCode",
"EfiLoaderData",
"EfiBootServicesCode",
"EfiBootServicesData",
"EfiRuntimeServicesCode",
"EfiRuntimeServicesData",
"EfiConventionalMemory",
"EfiUnusableMemory",
"EfiACPIReclaimMemory",
"EfiACPIMemoryNVS",
"EfiMemoryMappedIO",
"EfiMemoryMappedIOPortSpace",
"EfiPalCode",


Now in kernel/src/kernel.c

We need to see each memory map
entry.

We have to find how many entries we have by doing:

uint64_t mMapEntries = (<mem_info_t instance>).mapSize / (<mem_info_t instance>).mapDescriptorSize;

Now we will iterate through each entry:

map IS DEFINED IN mem_info_t struct.

for (int i = 0; i < mMapEntries; ++i) {
    memdesc_t* desc = (memdesc_t*)((uint64_t)(<mem_info_t instance>).mMap + (i * (<mem_info_t>).descriptorSize));
}

Now inside the loop you may print the 
memory sections by including
memoryInfo.h

and doing <your print function>((<name of your const char* array>)[desc->type]);

Also make sure at the end of _start 
which is the kernel entry to have a __asm__ __volatile__("cli; hlt");


----------  Global Descriptor Table (GDT)  ----------

Create two folders:

mkdir kernel/src/memory  kernel/src/memory/impl

Now inside kernel/src/memory/ create a file
called GDT.h

You will need to includ stdint.h


Create a packed struct called gdt_descriptor_t.
You can pack it like this:

typedef struct {
} __attribute__((packed)) gdt_descriptor_t;

The GDT descriptor tells the CPU where the GDT is 
and how big it is.

Inside gdt_descriptor_t you will need the following:

- uint16_t size
- uint64_t offset


Now create another packed struct called gdt_entry_t.

That will have the following:

- uint16_t limit0 
- uint16_t base0  
- uint8_t base1
- uint8_t access_byte    // Describes the memory segment.
- uint8_t limit1
- uint8_t flags
- uint8_t base2

Now, we need to create the actual GDT.

Create a packed struct called gdt_t.

It will have the following:

- gdt_entry_t null
- gdt_entry_t kernelcode
- gdt_entry_t kerneldata
- gdt_entry_t usernull
- gdt_entry_t usercode
- gdt_entry_t userdata

And align it with __attribute__((aligned(0x1000))) 

Make sure it also has the packed attribute.

Now do: 

extern gdt_t gdt.
void load_gdt(gdt_descriptor_t* desc);

Now create a file with the path:
kernel/src/memory/impl/GDT.c
Uh oh, scary line number. ✞ (don't worry about this lol) 



Create a multiarray with __attribute__((aligned(0x1000)))
of type gdt_t called gdt like this:


__attribute__((aligned(0x1000))) gdt_t gdt = {
    {0, 0, 0, 0x00, 0x00, 0},  // Null descriptor.
    {0, 0, 0, 0x9A, 0xA0, 0},  // Kernel code.
    {0, 0, 0, 0x92, 0xA0, 0},  // Kernel data.
    {0, 0, 0, 0x00, 0x00, 0},  // User null.
    {0, 0, 0, 0x9A, 0xA0, 0},  // User code.
    {0, 0, 0, 0x92, 0xA0, 0}   // User data.
};


We will need to edit kernel/Makefile
so open that file up and add a variable called ASMC
which equals nasm.

Now create a variable under SRC called ASMSRC
which will equal $(call rwildcard,$(SRCDIR),*.asm)

And under OBJS do:
OBJS += $(patsubst $(SRCDIR)/%.asm, $(OBJDIR)/%.asm.o, $(ASMSRC))
Under the labels that look like this:

kernel: $(OBJS) link
$(OBJDIR)/%.o: $(SRCDIR)/%.c
	@mkdir -p $(@D)
	$(CC) $(CFLAGS) -c $^ -o $@

You would want to write the following:

$(OBJDIR)/%.asm.o: $(SRCDIR)/%.asm
	$(ASMC) $^ -felf64 -o $@

Now, you will need to create a file with the path
kernel/src/memory/GDT.asm


Put global loadGdt to make the label global.

Then you will need to tell the assembler to emit 64 bit code
with:

bits 64

Now create a label like this:

loadGdt:
    ; Some code.


Clear interrupts with cli
then load the GDT with:

lgdt [rdi]


Your file should look like this now:

global loadGdt
bits 64

loadGdt:
    cli
    lgdt [rdi]

Make sure to put the kernel data selector in AX
and then set segment registers to the data selector.

Your file should look like this:

global loadGdt
bits 64

loadGdt:
    cli
    lgdt [rdi]
    mov ax, 0x10
    mov ds, ax
    mov es, ax
    mov fs, ax
    mov gs, ax
    mov ss, ax

Make sure to get the return address and storing it in RDI.

Return address is first thing on stack frame so you can 
just use pop like this:

pop rdi

Now, move the kernel code selector into RAX
then push it to the stack 

Now create a label after loadGdt label called done

inside that label put a jump instruction to RDI.
Now back inside loadGdt label:

You will have to push the address of the done label to the stack
with the push instruction

then preform a far return with retfq

Your file should look like this now:



global loadGdt
bits 64

loadGdt:
    cli
    lgdt [rdi]
    mov ax, 0x10
    mov ds, ax
    mov es, ax
    mov fs, ax
    mov gs, ax
    mov ss, ax
    pop rdi
    mov rax, 0x08
    push rax
    push done
    retfq

done:
    jmp rdi


Now inside kernel/src/memory/GDT.h

do:

extern void load_gdt(gdt_descriptor_t* desc);

Inside kernel/src/kernel.c

you need to include kernel/src/memory/GDT.h
and create a GDT descriptor like this:

static gdt_descriptor_t gdt_desc = {
    .size = sizeof(gdt) - 1,
    .offset = (uint64_t)&gdt
};


Now load it:

load_gdt(&gdt_desc);



----------  Clearing the screen  ----------


You can clear the screen by using a helper function I made.

First edit kernel/src/drivers/FrameBuffer.h


Now add this declaration:

void clearScreen(canvas_t* canvas, unsigned int color);


Now in the FrameBuffer source file make this definition:

void clearScreen(canvas_t* canvas, unsigned int color) {
    uint64_t bytesPerScanline = canvas->lfb->ppsl * 4;

    for (int vsl = 0; vsl < canvas->lfb->height; ++vsl) {
        uint64_t pixPtrBase = (uint64_t)canvas->lfb->baseAddr + (bytesPerScanline * vsl);
        for (uint32_t* pixelPtr = (uint32_t*)pixPtrBase; pixelPtr < (uint32_t*)(pixPtrBase + bytesPerScanline); ++pixelPtr) {
            *pixelPtr = color;
        }
    }
}


Feel free to use it when you need to!



----------  Interrupt Descriptor Table (IDT)  ----------

Create 2 files with the path:

kernel/src/interrupts/IDT.h
kernel/src/interrupts/impl/IDT.c

in IDT.h you need to do the following:

include stdint.h and create an IDT descriptor.

Define these macros

#define TRAP_GATE_FLAGS 0x8F
#define INT_GATE_FLAGS 0x8E
#define INT_GATE_USER_FLAGS 0xEE

A IDT descriptor describes an interrupt.

Inside your IDT descriptor struct it will have
the following:

- uint16_t isr_low          // Low bits of the ISR.
- uint16_t selector         // The segment the interrup should operate in.
- uint8_t ist               // Interrupt stack table.
- uint8_t attr              // Flags.
- uint16_t isr_mid          // Middle bits of the ISR.
- uint32_t isr_high         // High bits of the ISR.
- uint32_t reserved         // Reserved by CPU manufacturer (DO NOT USE).

MAKE SURE IT IS PACKED WITH __attribute__((packed))

Now we will need to create the IDTR which will tell
the CPU where the IDT is loaded in memory.

It will have the following:

- uint16_t limit
- uint64_t base

MAKE SURE IT IS PACKED


When the interrupt occurs an interrupt frame will be pushed
to the stack which will give us some information about
the current register space states.

We need to make the interrupt frame.
So, create a packed struct with the following entries:

- uint64_t rip       // Instruction pointer.
- uint64_t cs        // Code segment.
- uint64_t rflags    // To be honest, I am not quite sure what this is.
- uint64_t rsp       // Stack pointer (points to the top of the stack).
- uint64_t ss        // Stack segment (points to the segment that contains the stack).


Now we need to create two function declarations:

void set_idt_entry(unsigned char entry, void* isr, unsigned char flags);
void idt_install()

Now, inside IDT.c we will define these functions.

void set_idt_entry(unsigned char entry, void* isr, unsigned char flags) {
    uint64_t addr = (uint64_t)isr;          // Gets the address of the ISR.
    idt[entry].isr_low = addr & 0xFFFF;     // Grabs the lower bits.
    idt[entry].isr_high = (addr >> 32) & 0xFFFFFFFF;        // Grabs the high bits.
    idt[entry].isr_mid = (addr >> 16) & 0xFFFF;             // Grabs the middle bits.
    idt[entry].selector = 0x08;                             // We may need to change this as we will create usermode.
    idt[entry].reserved = 0x0;                              // Just set to zero.
    idt[entry].attr = flags;                        
    idt[entry].ist = 0;                                     // Set to zero as well.
}


void idt_install() {
    idtr.limit = (uint16_t)sizeof(idt_desc_t) * 255;  // Sets the limit to the size of idt_desc_t * (256 - 1)
    idtr.base = (uint64_t)&idt[0];                    // Gets the base. 
    __asm__ __volatile__("lidt %0" : : "memory" (idtr));
}


Now, inside the folder where you put the IDT.h
create a file called ISR.h

It will have declarations of interrupt service routines
that will be called by the CPU when an interrupt
occurrs.

Create a function declaration like this:

__attribute__((interrupt)) div0_handler(int_frame_t*);


Now create an ISR.c in the impl folder.


Copy the declaration and add a body (keep the attribute).

CHALLANGE:
Try writing it to clear the screen and displaying an error message.

Now inside kernel/src/kernel.c under where you loaded the GDT
put:

set_idt_entry(0x0, div0_handler, TRAP_GATE_FLAGS);
And then under that call idt_install()


Now at the bottom of your file (before the halt of course).

Try doing this:

if (0 / 0 == 1) {}

It should raise an exception, if it doesn't 
then you may have did something wrong.

If you cannot figure it out, put an issue on
my GitHub and I will happily help you.



----------  Programmable Interrupt Chip (PIC)  ----------


First create a file with the path:

kernel/src/drivers/IO.h

And put the following code in:

#include <stdint.h>

void outportb(uint16_t port, uint8_t value);
uint8_t inportb(uint16_t port);
void io_wait();


Now create a file with the path kernel/src/drivers/impl/IO.c

And put the following code in it:

#include "../IO.h"

unsigned char inportb(unsigned short port) {
    unsigned char result;
    __asm__("in %%dx, %%al" : "=a" (result) : "d" (port));
    return result;
 }


void outportb(unsigned short port, unsigned char data) {
    __asm__("out %%al, %%dx" : :"a" (data), "d" (port));
}

void io_wait() {
    __asm__ __volatile__("outb %%al, $0x80" : : "a"(0));
}


You do not need to worry about this code.

Now edit a file with the path:

kernel/src/drivers/PIC.h

Now in your PIC.h file you need to make the following
macros:

#define PIC1_COMMAND 0x20       // Master chip.
#define PIC1_DATA 0x21          // Data line.
#define PIC2_COMMAND 0xA0       // Slave chip.
#define PIC2_DATA 0xA1          // Data line.

#define ICW1_INIT 0x10
#define ICW1_ICW4 0x01
#define ICW4_8086 0x01
#define PIC_EOI 0x20

Also include IO.h


Now edit kernel/src/interrupts/IDT.h

Now, include kernel/src/drivers/PIC.h

Now edit kernel/src/interrupts/impl/IDT.c

You are going to add some things above everything in 
idt_install()

First, we need to save the bitmask of the 
slave and master chip.

A bitmask is basically just some bits that control
if certain interrupts will be sent to the CPU
or not.

So do:

uint8_t master_bm, slave_bm
master_bm = inportb(PIC1_DATA);
io_wait();                          // To wait for PIC to catch up.
slave_bm = inportb(PIC2_DATA);
io_wait();

Now we need initalize the master PIC chip so 
do:

outportb(PIC1_COMMAND, ICW1_INIT | ICW1_ICW4);
io_wait();

Now initalize the slave PIC chip so we do:

outportb(PIC2_COMMAND, ICW1_INIT | ICW1_ICW4);
io_wait();

Now we tell PIC their interrupt offsets to avoid
collisions with exception offsets due to a design flaw
with IBM or something.

Do:

outportb(PIC1_DATA, 0x20);
io_wait();
outportb(PIC2_DATA, 0x28);
io_wait();

We we have to tell the two PIC chips about
each others existance.

outportb(PIC1_DATA, 4);
io_wait();
outportb(PIC2_DATA, 2);
io_wait();

We will also have to make them operate in 
8086 mode.

outportb(PIC1_DATA, ICW4_8086);
io_wait();
outportb(PIC2_DATA, ICW4_8086);
io_wait();

Now restore the bitmask:

outportb(PIC1_DATA, master_bm);
io_wait();
outportb(PIC2_DATA, slave_bm);

Now just to make sure nothing weird happens we can 
also mask everything:

outportb(PIC1_DATA, 0xFF);

Last thing. Add this declaration to 
kernel/src/drivers/PIC.h

void PIC_sendEOI(unsigned char irq);

Create PIC.c
And add this body to kernel/src/drivers/impl/PIC.c

void PIC_sendEOI(unsigned char irq) {
	if(irq >= 8) {
		outb(PIC2_COMMAND, PIC_EOI);
    }
 
	outb(PIC1_COMMAND,PIC_EOI);
}

    
----------  Keyboard Driver  ----------

A driver is a program that tells 
computer hardware how to function.

Create a file with the path:

kernel/src/drivers/keyboard.h


In there you will declare an ISR like so:

You also wanna include IDT.h

__attribute__((interrupt)) kb_isr(int_frame_t*);

Now edit a file with the path:

kernel/src/drivers/impl/keyboard.c

And do:

__attribute__((interrupt)) kb_isr(int_frame_t*) {
        // Try printing to the screen when a key is pressed!
}

MAKE SURE THE LAST THING IN THE KB_ISR IS 
PIC_sendEOI(1);             // One passed in to clear for IRQ line 1.




----------   Mouse   ----------

Lets get the mouse working!


Create a file with the path:

kernel/src/drivers/mouse.h

First, include IO.h and stdint.h

The mouse is on the auxillary port on the keyboard
controller.

We need to enable the enable the mouse on that port.

Create a function declaration called mouse_init()
and another one called mouse_wait() and one more
called mouse_read().

We need to wait for the second bit of 0x64 to be clear to
send more bytes to mouse.

Create a file with the path :

kernel/src/drivers/impl/mouse.c

Now in mouse_wait() it will do the following:

Create a variable called timeout with type
uint64_t that is set to 100000.

Now do: 

while (timeout--);

And inside while loop do the following:

if (!(inportb(0x64) & 1)) {
    return;
}

Create a static function called mouse_wait_inp()

which will do:

uint64_t timeout = 100000;
while (timeout--) {
    if (inportb(0x64) & 0) {
        return;
    }
}


Now in mouse_read() it will do:

mouse_wait_inp();
return inportb(0x60);

Now in mouse_init();

It will do the following:


